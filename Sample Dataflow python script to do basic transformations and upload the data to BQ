#Basic script to extract the data do the basic transformations and upload the data to BQ

import logging
import argparse
import re
from datetime import datetime as dt
from apache_beam.options.pipeline_options import PipelineOptions
import apache_beam as beam


def replace_nulls(element):
    return element.replace('NULL','')

def format_datetime_bq(element):
    ref = element.find('/20')
    start = element[:ref].rfind(',')+1
    end = ref+element[ref:].find(',')
    element = element[:start]+dt.strftime(dt.strptime(element[start:end], '%m/%d/%Y %H:%M'),
                                          '%Y-%m-%d %H:%M:%S')+element[end:]

    rref = element.rfind('/20')
    start = element[:rref].rfind(',')+1
    end = rref+element[rref:].find(',')
    element = element[:start]+dt.strftime(dt.strptime(element[start:end],'%m/%d/%Y %H:%M'),
                                          '%Y-%m-%d %H:%M:%S')+element[end:]

    return element

def parse_method(string_input):
	
    values = re.split(",", re.sub('\r\n', '', re.sub('"', '',string_input)))
    row = dict(
        zip(('Trip_Id', 'Trip__Duration', 'Start_Station_Id', 'Start_Time',
        'Start_Station_Name', 'End_Station_Id', 'End_Time', 'End_Station_Name',
        'Bike_Id', 'User_Type'),values))
    return row


def run(argv=None, save_main_session=True):

    parser = argparse.ArgumentParser()

    parser.add_argument(
        '--input',
        dest='input',
        required=False,
        help='Input file to read. This can be a local file or '
        'a file in a Google Storage Bucket.',
        default='gs://dataflow-bharadwaj-test/*.csv')
	
    parser.add_argument('--output',
                        dest='output',
                        required=False,
                        help='Output BQ table to write results to.',
                        default='dataflow_bharadwaj_test.testdata')
	
    known_args, pipeline_args = parser.parse_known_args(argv)
	
    p = beam.Pipeline(options=PipelineOptions(pipeline_args))

    (p	
    | 'Read File' >> beam.io.ReadFromText(known_args.input, skip_header_lines=1)
    | 'Replace Nulls' >> beam.Map(replace_nulls)
    | 'Convert to BQ Datetime' >> beam.Map(format_datetime_bq)
    | 'String To BigQuery Row' >> beam.Map(parse_method)
    | 'Write To BigQuery' >> beam.io.Write(
    beam.io.WriteToBigQuery(
    known_args.output,
    schema='Trip_Id:INTEGER,Trip__Duration:INTEGER,Start_Station_Id:INTEGER,'
    'Start_Time:DATETIME,Start_Station_Name:STRING,End_Station_Id:INTEGER,'
    'End_Time:DATETIME, End_Station_Name:STRING, Bike_Id:INTEGER, User_Type:STRING',
    create_disposition=beam.io.BigQueryDisposition.CREATE_IF_NEEDED,
    write_disposition=beam.io.BigQueryDisposition.WRITE_TRUNCATE)))
	
    p.run().wait_until_finish()


if __name__ == "__main__":
    logging.getLogger().setLevel(logging.WARNING)
    run()
